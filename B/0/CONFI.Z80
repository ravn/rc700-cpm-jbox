	ORG	0100H
;
; RC702 CONFI UTILITY FOR SETTING BIOS PARAMETERS ON DISK.
;
; DASM'ED 930421 ThorbjÃ¸rn Ravn Andersen
;
; RASM+Z80ASM'ED 030131 (The one coming with RunCPM)
;
; MacOS command line:
;
; ~/git/rasm/rasm -ob CONFI.COM CONFI.Z80; cmp -l CONFI.COM CONFIORG.COM | awk '{printf "%08X %02X %02X\n", $1 + 256,$2, $3}'
	.z80

; BIOS locations - https://www.seasip.info/Cpm/bios.html


ADRMOD:	EQU	0DA33H	; ADDRESS MODE = XY
WR5A:	EQU	0DA34H	; ?
WR5B:	EQU 	0DA35H	; ?
FD0:	EQU	0DA37H	; Floppy config, see CPMBOOT.MAC line 34ff.
FDTIM0:	EQU	0FFE7H

; The RC700 BIOS location is hardcoded to DA00.
; This allows adding a mock BIOS under RunCPM for testing.

BIOSWBOOT:	EQU	0DA03H

BIOSCONOUT:	EQU	0DA0CH
BIOSSELD:	EQU	0DA1BH
BIOSSETT:	EQU	0DA1EH
BIOSSETS:	EQU	0DA21H
BIOSSETD:	EQU	0DA24H
BIOSXREAD:	EQU	0DA27H
BIOSXWRITE:	EQU	0DA2AH

;
; Z80SIO commands:
; http://www.jbox.dk/rc702/hardware/zilog-um0081.pdf
; (page 272ff)


	ORG	100H
	DS	256
START:	
	EX	(SP),HL
	LD	SP,KBDANISH
	PUSH	HL
	LD	DE,WELCOMEMSG
	LD	C,9
	CALL	5
WHICHDISK:	
	LD	DE,DISKACMSG
	LD	C,9
	CALL	5
	LD	C,0AH
	LD	DE,READLINEBUF
	CALL	5
	LD	A,(READLINELEN)
	CP	1
	JR	NZ,WHICHDISK
	LD	HL,READLINECH1
	LD	A,(HL)
	CP	3
	JP	Z,0
	AND	0DFH	;UPCASE CHAR
	CP	'A'
	JR	Z,DISKOK
	CP	'C'
	JR	NZ,WHICHDISK
DISKOK:	
	SUB	'A'
	LD	(DRIVE),A
	XOR	A
	CALL	RWCB		; A=0 -> Read configuration block
	CALL	MAINMENU
LEAVE:	
	LD	C,2	;CLEAR SCREEN
	LD	E,0CH
	CALL	5
	CALL	SETKBMEMORY
	CALL	SETVIDEO
	CALL	SETSIOA
	CALL	SETCTC0
	CALL	SETSIOB
	CALL	SETCTC1
	JP	0
;
;
;
MAINMENU:	
	LD	HL,MENUMSG
	LD	DE,1
	LD	BC,6
	CALL	MENU
	RET	NC
	LD	DE,MAINMENU
	PUSH	DE
	CALL	JUMPJPTABLE
	DW	PRINTSETUP
	DW	TERMSETUP
	DW	KBSETUP
	DW	CURSORSETUP
	DW	STOPTIME
	DW	SAVECB

;
;
;

TERMSETUP:	
	LD	HL,TERMMSG
	LD	DE,1
	LD	BC,5
	CALL	MENU
	RET	NC
	LD	DE,TERMSETUP
	PUSH	DE
	CALL	JUMPJPTABLE
	DW	TERMSTOPBIT
	DW	TERMPARITY
	DW	TERMBAUDRATE
	DW	TERMSENDSIZE
	DW	TERMRECSIZE


PRINTSETUP:	
	LD	HL,PRINTERMSG
	LD	DE,1
	LD	BC,4
	CALL	MENU
	RET	NC
	LD	DE,PRINTSETUP
	PUSH	DE
	CALL	JUMPJPTABLE
	DW	PRINTSTOPBIT
	DW	PRINTPARITY
	DW	PRINTBAUDRATE
	DW	PRINTSENDSIZE
	DW	PRINTRECSIZE


TERMSTOPBIT:	
	LD	HL,CBTREG4
	JP	STOPBIT


PRINTSTOPBIT:	
	LD	HL,CBPREG4
	JP	STOPBIT


STOPBIT:	
	LD	A,(HL)	
	PUSH	HL
	RRCA
	RRCA
	AND	3
	DEC	A		; CURRENT = (([CBxREG4] >> 2) & 3) - 1

	LD	HL,STOPBITSMSG
	LD	DE,1
	LD	BC,3
	CALL	MENU
	POP	DE
	RET	NC
	PUSH	DE

	LD	A,L		
	RLCA
	RLCA
	LD	B,A		; B=low(CMDNUMBER) << 2
	POP	HL
	LD	A,(HL)		; [CBxREG4] = ([CBxREG4] & 11110011b ) | B
	AND	11110011B
	ADD	A,B
	LD	(HL),A
	RET


TERMPARITY:	
	LD	HL,CBTREG4
	JP	PARITY

PRINTPARITY:	
	LD	HL,CBPREG4
	JP	PARITY

PARITY:	
	LD	A,(HL)
	PUSH	HL
	INC	A
	AND	3		; CURRENT = (([CBxREG4] +1) & 3)

	LD	HL,PARITYMSG
	LD	DE,1
	LD	BC,3
	CALL	MENU
	POP	DE
	RET	NC
	PUSH	DE

	LD	A,L
	XOR	2
	LD	B,A		; B = low(CMDNUMBER) ~ 2 (bug?)
	POP	HL
	LD	A,(HL)
	AND	0FCH
	ADD	A,B
	LD	(HL),A		; [CBxREG4] = ([CBxREG4] & 11111100b ) | B

	RET


TERMBAUDRATE:	
	LD	HL,CURTERMBAUD
	CALL	BAUDRATE
	RET	NC
	LD	A,C
	LD	(CBTERMBAUD),A
	LD	A,(CBTREG4)
	AND	00111111B
	ADD	A,B
	LD	(CBTREG4),A
	RET

Z80CTCSIOA:	EQU 	0CH		; page 20ff
SETCTC0:	
	LD	A,01000111B		; SIO A CTC: Reset, no int, counter mode, Time Constant follows
	OUT	(Z80CTCSIOA),A
	LD	A,(CBTERMBAUD)		; SIO A BAUD RATE:  1..256
	OUT	(Z80CTCSIOA),A
	RET


PRINTBAUDRATE:	
	LD	HL,CURPRINTBAUD
	CALL	BAUDRATE
	RET	NC
	LD	A,C			; CBPRINTBAUD = TIMECONSTANTS[selection]
	LD	(CBPRINTBAUD),A
	LD	A,(CBPREG4)		; set bit 6..7 of Z80SIO CBPREG4 to either X16
	AND	03FH			; or X64 from CLOCKRATES[selection]
	ADD	A,B
	LD	(CBPREG4),A
	RET

Z80CTCSIOB:	EQU 	0DH		; page 20ff

SETCTC1:	
	LD	A,01000111B		;PRINTER BAUD RATE
	OUT	(Z80CTCSIOB),A		; SIO B CTC: Reset, no int, counter mode, Time Constant follows
	LD	A,(CBPRINTBAUD)
	OUT	(Z80CTCSIOB),A
	RET


BAUDRATE:	
	PUSH	HL
	LD	A,(HL)		; current = [CURxBAUD]
	LD	HL,BAUDRATEMSG
	LD	DE,1
	LD	BC,11
	CALL	MENU
	POP	DE
	RET	NC
	PUSH	DE
	DEC	HL
	EX	DE,HL
	LD	HL,TIMECONSTANTS
	ADD	HL,DE
	LD	C,(HL)		; C= CTC Time constant for selection
	LD	HL,CLOCKRATES
	ADD	HL,DE
	LD	B,(HL)		; B = SIO slowdown (X16, X64) from CLOCKRATES[selection]
	POP	HL
	LD	(HL),A		; [CURxBAUD] = selection
	SCF
	RET


Z80SIOCONTROLA	EQU	0AH
Z80SIOCONTROLB	EQU	0BH

SETSIOA:	
	LD	HL,CBTERM	;TERMINAL PORT CONFIGURATION
	LD	B,9		;Configure Z80 SIOA with 9 bytes at CBTERM
	LD	C,Z80SIOCONTROLA 
	DI
	OTIR
	EI
	RET


SETSIOB:	
	LD	HL,CBPRINT	;PRINTER PORT
	LD	B,11		;Configure Z80 SIOA with 11 bytes at CBPRINT
	LD	C,Z80SIOCONTROLB
	DI
	OTIR
	EI
	RET


TERMSENDSIZE:	
	LD	HL,CBTREG5
	CALL	SENDSIZE
	RET	NC
	AND	60H
	LD	(WR5A),A
	RET


TERMRECSIZE:	
	LD	HL,CBTREG3
	CALL	RECSIZE
	RET


PRINTSENDSIZE:	
	LD	HL,CBPREG5
	CALL	SENDSIZE
CHARSIZE:	
	RET	NC
	AND	60H
	LD	(WR5B),A
	RET


PRINTRECSIZE:	
	RET


SENDSIZE:	
	LD	A,(HL)
	PUSH	HL
	RLCA
	RLCA
	RLCA
	AND	3		; Current = bit 5..6 of [CBxREG5] 
	LD	HL,BITS2SENDMSG
	LD	DE,1
	LD	BC,4
	CALL	MENU
	POP	DE
	RET	NC
	PUSH	DE
	RRCA			; FIXME:  Magic to put the selection back in [CBxREG5]
	JP	NC,L02CC
	CCF
	ADD	A,2


L02CC:	
	RRCA
	RRCA
	RRCA
	AND	60H
	LD	B,A
	POP	HL
	LD	A,(HL)
	AND	9FH
	OR	B
	LD	(HL),A
	SCF
	RET


RECSIZE:	
	LD	A,(HL)
	PUSH	HL
	RLCA
	RLCA
	AND	3		; Current = bit 6..7 of [CBxREG3]
	LD	HL,RECSIZEMSG
	LD	DE,1
	LD	BC,4
	CALL	MENU
	POP	DE
	RET	NC
	PUSH	DE
	RRCA			; FIXME: Magic to put selection back in [CBxREG3]
	JP	NC,L02F6
	CCF
	ADD	A,2


L02F6:	
	RRCA
	RRCA
	AND	0C0H
	LD	B,A
	POP	HL
	LD	A,(HL)
	AND	03FH
	ADD	A,B
	LD	(HL),A
	RET
;
;
;
;


KBSETUP:			; Select language mapping and copy it to working area.
	LD	HL,KBMSG
	LD	A,(CBLANGUAGE)
	LD	DE,1
	LD	BC,7
	CALL	MENU
	RET	NC
	LD	(CBLANGUAGE),A
	LD	HL,KBDANISH	; HL = KBDANISH + 0180H * (Selected - 1) 
	LD	BC,0180H
KBLOOP1:	
	DEC	A
	JP	M,MOVEKBCONFIG
	ADD	HL,BC
	JP	KBLOOP1

MOVEKBCONFIG:	
	LD	DE,CBKB
	LDIR
	RET

SETKBMEMORY:			; Copy current language mapping to working area.
	LD	A,(CBLANGUAGE)
	LD	HL,KBDANISH
	LD	BC,0180H
KBLOOP2:	
	DEC	A
	JP	M,MOVEKBMEMORY
	ADD	HL,BC
	JP	KBLOOP2
MOVEKBMEMORY:	
	LD	DE,0F680H
	LDIR
	RET

CURSORSETUP:	
	LD	HL,CURSORMSG
	LD	DE,1
	LD	BC,2
	CALL	MENU
	RET	NC
	LD	DE,CURSORSETUP
	PUSH	DE
	CALL	JUMPJPTABLE
	DW	CURSORFORM
	DW	CURSXB4Y

CURSORFORM:	
	LD	HL,CURSFORMMSG
	LD	A,(CBCURSOR)
	LD	DE,1
	LD	BC,4
	CALL	MENU
	RET	NC
	LD	A,L
	DEC	A
	LD	(CBCURSOR),A	
	AND	3		; set bit 4..5 of [CBVIDEO4] to selection
	RLCA
	RLCA
	RLCA
	RLCA
	LD	C,A
	LD	A,(CBVIDEO4)	
	AND	11001111B
	OR	C
	LD	(CBVIDEO4),A
	RET


; Intel 8275 Programmable CRT Controller
; 
; http://www.jbox.dk/rc702/hardware/intel-8275.pdf
; Scan, complete (page 16ff has commands): 
;
; http://www.elektronikjk.pl/elementy_czynne/IC/8275.pdf
; Searchable, incomplete (page 3 has commands):  



I8275DATAPORT	EQU 00H
I8275CMDPORT	EQU 01H

SETVIDEO:	
	LD	A,01000000B		; Stop display.
	OUT	(I8275CMDPORT),A
	LD	A,0			; Reset and send 4 data bytes for configuration
	OUT	(I8275CMDPORT),A
	LD	A,(CBVIDEO1)
	OUT	(I8275DATAPORT),A
	LD	A,(CBVIDEO2)
	OUT	(I8275DATAPORT),A
	LD	A,(CBVIDEO3)
	OUT	(I8275DATAPORT),A
	LD	A,(CBVIDEO4)
	OUT	(I8275DATAPORT),A
	LD	A,00100011B		; Start display
	OUT	(I8275CMDPORT),A	; (0 clocks between DMA requests, 8 DMA cycles per burst) (FIXME: Validate DMA setup)
	RET
;
;
;
CURSXB4Y:	
	LD	HL,CURSADDRMSG
	LD	A,(CBXB4Y)
	LD	DE,1
	LD	BC,2
	CALL	MENU
	RET	NC
	LD	(CBXB4Y),A
	LD	(ADRMOD),A
	RET

; Stop time for mini floppy motor.  Stored as ticks in FDTIM0.

STOPTIME:	
	LD	HL,STOPTIME1MSG
	CALL	PRINTMENU
	LD	HL,(CBSTOPTIME)
	CALL	HLDIV50
	CALL	PRINTHLDEC
	LD	HL,STOPTIME2MSG
	LD	DE,5
	LD	BC,1200
	CALL	MENU
	RET	NC
	CALL	MULT50HL
	LD	(FDTIM0),HL	
	LD	(CBSTOPTIME),HL
	RET

SAVECB:	
	LD	A,1
	CALL	RWCB
	RET

; If A==0 read sector, otherwise write sector.
; If this fails, abort immediately.
RWSECTOR:	
	OR	A
	JR	Z,RSECTOR
	LD	BC,0
	CALL	BIOSXWRITE
	JR	CHECKRWRES
RSECTOR:	
	CALL	BIOSXREAD

CHECKRWRES:	
	CP	0
	JP	NZ,BADSECTOREXIT
	RET

; Read Configuration Block.
; 8" drives are temporarily set to 0: SS,128 B/S,25 S/T 
; 5,25" drives are temporarily set to 16: DD,512 B/S,20 S/T
;
; This is mislabeled.   A=0 for read, A=1 for write
RWCB:	
	PUSH	AF
	LD	A,(DRIVE)
	CP	2
	JR	Z,READDRIVEC
	POP	AF
	LD	HL,FD0	;DRIVE A, 0 for maxi, $10 for mini.
	LD	B,(HL)
	PUSH	BC
	PUSH	AF
	IN	A,(14H)
	AND	80H		
	JR	Z,MINISYSTEM
	LD	A,0		
	JR	SETTRACK0FOR
MINISYSTEM:	
	LD	A,10H
SETTRACK0FOR:	
	LD	(HL),A
	LD	BC,0
	CALL	BIOSSELD
	JP	READCBBLOCKS
READDRIVEC:	
	LD	B,0
	LD	C,2
	CALL	BIOSSELD

; Read/write the three sectors constituing the configuration block from/to disk.
; A is on stack, if A=0 is read, otherwise write.
READCBBLOCKS:	
	LD	BC,0
	CALL	BIOSSETT	; TRACK#0
	LD	BC,1
	CALL	BIOSSETS	; SECTOR#1
	LD	BC,CBBLOCK1
	CALL	BIOSSETD	
	POP	AF
	PUSH	AF		; POP/PUSH OPERATION CODE IN A
	CALL	RWSECTOR
	LD	BC,CBKB
	CALL	BIOSSETD	
	LD	BC,2
	CALL	BIOSSETS	; SECTOR#2
	POP	AF
	PUSH	AF
	CALL	RWSECTOR
	LD	BC,CBBLOCK3
	CALL	BIOSSETD	
	LD	BC,3
	CALL	BIOSSETS	; SECTOR#3
	POP	AF
	PUSH	AF
	CALL	RWSECTOR
	LD	BC,CBBLOCK4
	CALL	BIOSSETD
	LD	BC,4
	CALL	BIOSSETS	; SECTOR#4
	POP	AF
	CALL	RWSECTOR
	LD	A,(DRIVE)	; DONE WITH R/W.  NOW CLEAN UP
	CP	2
	JP	Z,DONEHD
DONEFLOPPY:
	LD	HL,FD0		; RESTORE ORIGINAL FLOPPY TYPE
	POP	AF
	LD	(HL),A
	LD	BC,0
	CALL	BIOSSELD
	RET
DONEHD:	
	LD	B,0
	LD	C,2
	CALL	BIOSSELD
	RET
MULT10HL:	
	ADD	HL,HL		; Calculate 2*HL and 8*HL and add them.
	LD	D,H		
	LD	E,L
	ADD	HL,HL
	ADD	HL,HL		
	ADD	HL,DE		
	RET
MULT50HL:	
	CALL	MULT10HL	; Calculate 10*HL and 40*HL and add them.
	LD	D,H
	LD	E,L
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	RET
HLDIV50:			; Count how many times we can add -50 to HL 
	LD	DE,1		; before going negative, and return that in HL.
	LD	BC,-50
HLDIV50B:	
	ADD	HL,BC
	LD	A,H
	OR	L
	JR	Z,HLDIV50C
	INC	DE
	JR	HLDIV50B
HLDIV50C:	
	EX	DE,HL
	RET

;
; Print out HL as a decimal number (>0).
; Leading zeroes are not printed.
;
PRINTHLDEC:	
	LD	B,0
	LD	DE,10000
	CALL	PRINTHLDIVDE
	LD	DE,1000
	CALL	PRINTHLDIVDE
	LD	DE,100
	CALL	PRINTHLDIVDE
	LD	DE,10
	CALL	PRINTHLDIVDE
	LD	DE,1

; Print as an ASCII digit number of times DE can be divided into
; current value of HL (which contains the remainder 
; afterwards).
; Leading zeroes are suppressed (B=0) until
; first non-zero digit is printed (B=1).

PRINTHLDIVDE:	
	LD	C,'0'
PRINTHL2:			; 
	OR	A		; //reset carry for SBC
	SBC	HL,DE		; subtract 10000/1000/100/10/1
	JR	C,PRINTHL3	; if negative exit loop
	INC	C		; 
	JR	PRINTHL2	; 
PRINTHL3:	
	ADD	HL,DE		; add back again to get remainder
	LD	A,'0'		
	CP	C
	JR	Z,PRINTHL4	 
	LD	B,1		; non-zero digit, so don't suppress zeroes anymore
PRINTHL4:	
	XOR	A		;Print char in C, iff B = 1
	CP	B
	PUSH	AF
	PUSH	HL
	PUSH	BC
	PUSH	DE
	LD	E,C
	LD	C,2
	CALL	NZ,5
	POP	DE
	POP	BC
	POP	HL
	POP	AF
	RET


; Print menu text recognizing 6 as gotoxy, and 
; 5 as "print * if this is the selected value"
;
; A = selected value
; BC = minimal value accepted 
; DE = maximum value accepted
; HL = pointer to zero-terminated menu text
; 
; Accept a numeric user response, which is parsed and checked if it is
; in range.  If not, an value invalid message is printed, and the user reprompted.
;
; Returns HL=CMDNUMBER, A=low(CMDNUMBER)-1 (flags set)
;
MENU:	
	PUSH	DE
	PUSH	BC
	CALL	PRINTMENU
GETCHOICE:	
	LD	HL,CHOICEMSG
	CALL	PRINTMENU
	LD	HL,0
	LD	(CMDNUMBER),HL
	LD	C,0AH
	LD	DE,READLINEBUF
	CALL	5
	LD	HL,READLINELEN
	LD	A,(HL)
	LD	(CMDLEN),A
	OR	A
	JR	Z,PRINTCRLF	;RETURN ON EMPTY COMMAND
	INC	HL
	LD	(CMDPTR),HL
MENUNEXTCH:			; now parse numeric string at CMDPTR into CMDNUMBER
	LD	A,(CMDLEN)
	DEC	A
	JP	M,MENUCHECKCMD	; more characters in CMD?
	LD	(CMDLEN),A
	LD	HL,(CMDPTR)
	LD	A,(HL)		
	INC	HL
	LD	(CMDPTR),HL
	LD	HL,(CMDNUMBER)	; CMDNUMBER = CMDNUMBER * 10 + [CMDPTR++] - '0'
	CALL	MULT10HL
	SUB	'0'
	LD	E,A
	LD	D,0
	ADD	HL,DE
	LD	(CMDNUMBER),HL
	JP	MENUNEXTCH

MENUCHECKCMD:	
	LD	HL,(CMDNUMBER)	; if BC > CMDNUMBER or CMDNUMBER > DE goto BADCHOICE
	POP	BC		; else printcrlf and return
	POP	DE
	PUSH	DE
	PUSH	BC
	OR	A
	SBC	HL,DE
	JR	C,BADCHOICE
	ADD	HL,DE
	INC	BC
	OR	A
	SBC	HL,BC
	JP	NC,BADCHOICE
	ADD	HL,BC
	LD	A,L		; HL=CMDNUMBER, A=low(CMDNUMBER) - 1 (flags set)
	DEC	A
	SCF
PRINTCRLF:	
	PUSH	AF
	PUSH	HL
	LD	C,2
	LD	E,0AH
	CALL	5
	LD	C,2
	LD	E,0DH
	CALL	5
	POP	HL
	POP	AF
	POP	BC
	POP	DE
	RET
BADCHOICE:	
	LD	HL,ILLEGALMSG
	CALL	PRINTMENU
	JR	GETCHOICE
READLINEBUF:	
	DB	5
READLINELEN:	
	DB	0
READLINECH1:	
	DB	0,0,0,0,0
CMDPTR:	
	DW	READLINECH1
CMDLEN:	
	DB	0
CMDNUMBER:	
	DW	0

; Jump to menu entry chosen stored in HL (1->0) in 
; table stored right after the CALL instruction.
;  

JUMPJPTABLE:	
	POP	DE	; DE = [return address + 2*(HL-1)]
	DEC	HL
	ADD	HL,HL
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	EX	DE,HL	; Jump to adress in DE.
	JP	(HL)

; A=  current menu entry selected.
; HL= zero-terminated menu text to print
; (ASCII 6 is gotoxy - respecting current XY-order)
; (ASCII 5 is menu entry counter, print '*' when same as A)

PRINTMENU:	
	LD	(STARREDCMD),A
PRINTNEXTHL:	
	LD	A,(HL)		; ch = (HL), exit if zero
	OR	A
	RET	Z
	CP	6		; If 6 set cursor position from two next bytes.
	CALL	Z,SETCURSORPOS
	CP	5		; IF 5 then if (starredcmd -- = 0) then print '*' otherwise print ' '	
	JP	NZ,PRINTPLAINCH
	LD	A,(STARREDCMD)
	DEC	A
	LD	(STARREDCMD),A
	OR	A
	JP	P,PRINTSPACE
	LD	A,'*'
	LD	(STARREDCMD),A	; set current selection to 42.  This is probably not needed.
	JP	PRINTPLAINCH
PRINTSPACE:	
	LD	A,' '
PRINTPLAINCH:			; Apparently 1FH (clear to end of screen) cannot be printed by BDOS 
				; so must be sent directly to BIOS (this may be wrong)
	CP	1FH
	JR	Z,PRINTBIOS
PRINTBDOS:	
	LD	E,A
	PUSH	HL
	LD	C,2
	CALL	5
	POP	HL
	INC	HL
	JR	PRINTNEXTHL
PRINTBIOS:	
	LD	C,A	; Char 1F is printed straight to BIOS.
	CALL	BIOSCONOUT
	INC	HL
	JR	PRINTNEXTHL

; ASCII 6 is GOTOXY, but if ADRMOD != 0 then 
; the characters must be sent backwards.
;
; This may be a compatability thing with non-RC software.

SETCURSORPOS:	
	LD	C,A
	CALL	BIOSCONOUT	; SEND ^F
	INC	HL
	LD	D,(HL)		; D=first char
	INC	HL		; E=second char
	LD	E,(HL)		
	LD	A,(ADRMOD)	; Check running system about which format to use?
	OR	A
	JP	NZ,CURSORBCKWRD
	LD	C,D		; First, second
	CALL	BIOSCONOUT
	LD	C,E
	CALL	BIOSCONOUT
	RET
CURSORBCKWRD:			
	LD	C,E		; second, first
	CALL	BIOSCONOUT
	LD	C,D
	CALL	BIOSCONOUT
	RET
STARREDCMD:	
	DB	0FFH
BADSECTOREXIT:	
	LD	DE,BADSECTORMSG
	LD	C,9
	CALL	5
	JP	0

; ----------------------------
WELCOMEMSG:	
	DB	0AH,0AH,0DH
	DB	'RC700 CP/M CONFIGURATION UTILITY  VERS 2.1  13.01.83$'
DISKACMSG:	
	DB	0AH,0DH
	DB	'SELECT SYSTEM DISK FOR CONFIGURATION (A/C)? $'
BADSECTORMSG:	
	DB	0AH,0DH
	DB	'BAD SECTOR $'
MENUMSG:	
	DB	0CH
	DB	6,50,37,'********** MENU **********',0AH,0DH
	DB	6,50,39,'1: PRINTER PORT',0AH,0DH
	DB	6,50,40,'2: TERMINAL PORT',0AH,0DH
	DB	6,50,41,'3: CONVERSION',0AH,0DH
	DB	6,50,42,'4: CURSOR',0AH,0DH
	DB	6,50,43,'5: MINI MOTOR STOP TIMER',0AH,0DH
	DB	6,50,44,'6: SAVE CONFIGURATION DESCRIPTION',0AH,0DH
	DB	6,50,45,0
	
TERMMSG:	
	DB	6,50,37,1FH
	DB	6,50,37,'********* TERMINAL PORT *********',0AH,0DH
	DB	6,50,39,'************* MENU **************',0AH,0DH
	DB	6,50,41,'1: NUMBER OF STOP BITS PR. CHARACTER',0AH,0DH
	DB	6,50,42,'2: PARITY',0AH,0DH
	DB	6,50,43,'3: BAUDRATE',0AH,0DH
	DB	6,50,44,'4: NUMBER OF BITS PR. CHARACTER TO TRANSMIT',0AH,0DH
	DB	6,50,45,'5: NUMBER OF BITS PR. CHARACTER TO RECEIVE',0AH,0DH
	DB	6,50,46,0
	
CURSFORMMSG:	
	DB	6,50,38,1FH
	DB	6,50,39,'******** FORMAT ********',0AH,0DH
	DB	6,49,41,5,'1: BLINKING REVERSE VIDEO',0AH,0DH
	DB	6,49,42,5,'2: BLINKING UNDERLINE',0AH,0DH
	DB	6,49,43,5,'3: REVERSE VIDEO',0AH,0DH
	DB	6,49,44,5,'4: UNDERLINE',0AH,0DH
	DB	6,50,45,0
	
KBMSG:	
	DB	6,50,37,1FH
	DB	6,50,37,'******** CONVERSION TABLE ********',0AH,0DH
	DB	6,49,39,5,'1: DANISH',0AH,0DH
	DB	6,49,40,5,'2: SWEDISH',0AH,0DH
	DB	6,49,41,5,'3: GERMAN',0AH,0DH
	DB	6,49,42,5,'4: UK-ASCII',0AH,0DH
	DB	6,49,43,5,'5: US+WS-Th',0AH,0DH
	DB	6,49,44,5,'6: FRENCH',0AH,0DH
	DB	6,49,45,5,'7: LIBRARY',0AH,0DH
	DB	6,50,46,0
	
STOPBITSMSG:	
	DB	6,50,38,1FH
	DB	6,50,39,'******** STOPBITS ********',0AH,0DH
	DB	6,49,41,5,'1: 1 BIT',0AH,0DH
	DB	6,49,42,5,'2: 1.5 BIT',0AH,0DH
	DB	6,49,43,5,'3: 2 BIT',0AH,0DH
	DB	6,50,44
	DB	0
PARITYMSG:	
	DB	6,50,38,1FH
	DB	6,50,39,'******** PARITY ********',0AH,0DH
	DB	6,49,41,5,'1: EVEN',0AH,0DH
	DB	6,49,42,5,'2: NO',0AH,0DH
	DB	6,49,43,5,'3: ODD',0AH,0DH
	DB	6,50,44,0
	
BAUDRATEMSG:	
	DB	6,50,38,1FH
	DB	6,50,39,'******** BAUDRATE ********',0AH,0DH
	DB	6,49,41,5,' 1:     50 BPS',0AH,0DH
	DB	6,49,42,5,' 2:     75 BPS',0AH,0DH
	DB	6,49,43,5,' 3:    110 BPS',0AH,0DH
	DB	6,49,44,5,' 4:    150 BPS',0AH,0DH
	DB	6,49,45,5,' 5:    300 BPS',0AH,0DH
	DB	6,49,46,5,' 6:    600 BPS',0AH,0DH
	DB	6,49,47,5,' 7:   1200 BPS',0AH,0DH
	DB	6,49,48,5,' 8:   2400 BPS',0AH,0DH
	DB	6,49,49,5,' 9:   4800 BPS',0AH,0DH
	DB	6,49,50,5,'10:   9600 BPS',0AH,0DH
	DB	6,49,51,5,'11:  19200 BPS',0AH,0DH
	DB	6,50,52,0
	
PRINTERMSG:	
	DB	6,50,37,1FH
	DB	6,50,37,'********* PRINTER PORT *********',0AH,0DH
	DB	6,50,39,'************* MENU *************',0AH,0DH
	DB	6,50,41,'1: STOPBIT',0AH,0DH
	DB	6,50,42,'2: PARITY',0AH,0DH
	DB	6,50,43,'3: BAUDRATE',0AH,0DH
	DB	6,50,44,'4: BIT PR. CHARACTER',0AH,0DH
	DB	6,50,45,0
	
ILLEGALMSG:	
	DB	6,64,55,7,'*** ILLEGAL ***',0AH,0DH
	DB	0
	
BITS2SENDMSG:	
	DB	6,50,38,1FH
	DB	6,50,39,'****** BITS/CHAR TRANSMITTER ******',0AH,0DH
	DB	6,49,41,5,'1: 1 TO 5 BITS',0AH,0DH
	DB	6,49,43,5,'3: 7 BITS',0AH,0DH
	DB	6,49,42,5,'2: 6 BITS',0AH,0DH
	DB	6,49,44,5,'4: 8 BITS',0AH,0DH
	DB	6,50,45,0
	
RECSIZEMSG:	
	DB	6,50,38,1FH
	DB	6,50,39,'****** BITS/CHAR RECEIVER ******',0AH,0DH
	DB	6,49,41,5,'1: 5 BITS',0AH,0DH
	DB	6,49,43,5,'3: 7 BITS',0AH,0DH
	DB	6,49,42,5,'2: 6 BITS',0AH,0DH
	DB	6,49,44,5,'4: 8 BITS',0AH,0DH
	DB	6,50,45,0
	
CURSORMSG:	
	DB	6,50,37,1FH
	DB	6,50,37,'*** CURSOR ***',0AH,0DH
	DB	6,50,39,'**** MENU ****',0AH,0DH
	DB	6,50,40,'1: FORMAT',0AH,0DH
	DB	6,50,41,'2: ADDRESSING',0AH,0DH
	DB	6,50,42,0
	
CURSADDRMSG:	
	DB	6,50,38,1FH
	DB	6,50,39,'****** ADDRESSING ******',0AH,0DH
	DB	6,49,41,5,'1: H,V',0AH,0DH
	DB	6,49,42,5,'2: V,H',0AH,0DH
	DB	6,50,43,0

CHOICEMSG:	
	DB	6,50,55,'CHOICE: ',0
	
STOPTIME1MSG:	
	DB	6,50,37,1FH
	DB	6,50,37,'***** MINI MOTOR STOP TIMER *****',0AH,0DH
	DB	6,50,39,'CURRENT VALUE IS: '
	DB	0
STOPTIME2MSG:	
	DB	' SECONDS',0AH,0DH
	DB	6,50,41,'SELECT NEW VALUE (RANGE 5-1200 SECONDS).',0AH,0DH
	DB	0

DRIVE:	
	DB	0

; See the RC702 Hardware manual for details on how the 0.614 MHz clock
; is first scaled down in the Z80 CTC and then additionally scaled down
; in the Z80 SIO to get to the desired baud rate.
;
; Interestinly the numbers are slightly off from
; the values coming from calculating 614000/64/50 to get 50 baud. (191,88
; instead of 193 etc.)
;
; Note that fig. 2.3.13 on page 25 has different values for 9600 and 19200.
;
X16:	EQU	40H
X64:	EQU	0C0H

CLOCKRATES:	; additional downscaling inside the Z80 SIO
	DB	X64,X64,X64,X64,X64
	DB	X16,X16,X16,X16,X16,X16

TIMECONSTANTS:	; initial downscaling in the Z80 CTC
	DB	193 	; 50
	DB 	128 	; 75
	DB	88  	; 110
	DB	64  	; 150
	DB	32  	; 300

	DB 	64	; 600
	DB	32	; 1200
	DB 	16	; 2400
	DB	8	; 4800
	DB	4 	; 9600
	DB	2	; 19200

CBBLOCK1	equ $
cbblock3	equ $+2*128
cbblock4	equ $+3*128

	DB	0
CBTERMBAUD:	
	DB	0,0
CBPRINTBAUD:	
	DB	0,0,0,0,0
;
;
;========================================================
;= Z80 SIO CONTROLLER                                   =
;========================================================
;
; http://www.jbox.dk/rc702/hardware/zilog-um0081.pdf
; pages 272ff
CBTERM:	
	DB	0,0
;PSIOA: 	
;	DB 018H		; CHANNEL RESET, table 13, page 275
;	DB 004H		; SELECT WR4, table 22, page 285
; 11000000 = clock rate, 00=x1, 01=x16, 10=x32, 11=x64 - see CLOCKRATES
; 00110000 = sync modes, 00=8-bit, 01=16-bit, 10=SLDC, 11=external
; 00001100 = stopbits, 00=sync modes, 01=1, 10=1.5, 11=2
; 00000011 = parity, 00=no, 01=odd, 10=no, 11=even 

CBTREG4:	
	DB	0,0
;	DB 047H		; 1 STOP BIT,EVEN PARITY,16*CLOCK
;	DB 003H		; SELECT WR3, figure 117, page 284
;
; 11000000 = bits pr character (00=5, 01=6, 10=7, 11=8)
; 00100000 = auto enables - DCD and CTS enable transmission
; 00010000 = hunt phase
; 00001000 = Rx CRC enable (SLDC)
; 00000100 = Adress search mode. (SLDC)
; 00000010 = SYNC character load inhibit
; 00000001 = Rx enable
CBTREG3:	
	DB	0,0
;	DB 061H		; REC,AUTO ENABLE. 7 BITS/CHARACTER
;	DB 005H		; SELECT WR5, table 26, page 287
;
; 7 = DTR
; 5..6 = Tx bits, 00=5 or less, 01=7, 10=6, 11=8
; 4 = send break
; 3 = Tx enable
; 2 = CRC-16/SDLC
; 1 = RTS,  
; 0 = Tx CRC enable
; 
CBTREG5:	
	DB	0,0,0
;	DB 020H		; RTS,DTR,XMIT DISABLE. 7 BITS/CHARACTER
;	DB 001H		; SELECT WR1, figure 115, page 277
;
; 7 = wait/ready enable
; 6 = wait/ready function
; 5 = wait/ready on receive transmit
; 3..4 = receive interrupt mode, 11=interrupt on all received characters
; 2 = status affects vector
; 1 = transmit interrupt enable (interrupt when transmit buffer is empty)
; 0 = enable external interrupts
;
;	DB 01BH		; ENABLE REC,XMIT AND EXT.STATUS.


;
CBPRINT:	
	DB	0,0,0,0
; PSIOB:	DB 018H		; CHANNEL RESET
;	DB 002H		; SELECT WR2, table 19, page 281
;	DB 010H		; INTERRUPT VECTOR
;	DB 004H		; SELECT WR4
CBPREG4:	
	DB	0,0
;	DB 047H		; 1 STOP BIT,EVEN PARITY,16*CLOCK  
;	DB 003H		; SELECT WR3
CBPREG3:	
	DB	0,0
;	DB 060H		; AUTO ENABLE,REC 7 BITS/CHAR,REC DISABLE.
;	DB 005H		; SELECT WR5
CBPREG5:	
	DB	0
;	DB 020H		; RTS,XMIT,DTR DISABLE. 7 BITS/CHARACTER
	DB	0,0
;	DB 001H		; SELECT WR1
;	DB 01FH		; ENABLE REC,XMIT AND EXT.STATUS. STATUS AFFECTS VECTOR

	DB	0,0,0,0

; 7: spaced rows
; 0..6: horizontal characters per row, max 80
CBVIDEO1:	
	DB	0
; 6..7: vertical trace row count
; 0..5: vertical rows per frame, max 64
CBVIDEO2:	
	DB	0
; 4..7: line underline placement
; 0..3: lines per character row 
CBVIDEO3:	
	DB	0
; 7: line counter offset, 0=none, 1=one.
; 6: field attribute transparent (doesn't use a visible character cell), 0=yes, 1=no
; 4..5: cursor shape, 00=blink reverse block, 01=blink underscore, 10=reverse block, 11=underscore
; 0..3: horisontal retrace count
CBVIDEO4:	
	DB	0

	DB	0
	DB	0,0,0
CBCURSOR:	
	DB	0
CBLANGUAGE:	
	DB	0
CURTERMBAUD:	
	DB	0
CURPRINTBAUD:	
	DB	0
CBXB4Y:	
	DB	0
CBSTOPTIME:	
	DW	0

; This may be bytes that should have been zeroed out.
	DB	0E5H,0D5H,2AH,0BBH,3AH,0E5H,0E5H
	DB	2AH,96H,3AH,0E5H,21H,0C0H,02H
	DB	0E5H,21H,40H,30H,0E5H,0C5H,0C9H
	DB	0CDH,93H,30H,0C1H,0E1H,0D1H,0CDH
	DB	49H,0DH
	DB	0C2H,6FH,30H,3AH,9FH
	DB	3AH,0B7H,0C2H,58H,30H,78H,177
	DB	0C2H,6FH,30H,2AH,91H,3AH,0E5H
	DB	0CDH,0EAH,34H,0E1H,0CDH,0CBH,2CH
	DB	0AFH,32H,9FH,3AH,0D1H,0D5H,2AH
	DB	98H,3AH,0E5H,0EBH,0E9H,0D5H,0CDH
	DB	0C8H,35H,0B7H,0CAH,0A2H,30H,11H
	DB	8DH,38H,0CDH,0DEH
CBKB:				; Current KB mapping, 128 char keyboard map, 256 char output map
	DS	0180H
STACK:	
	DS	0080H
KBDANISH:	
	DB	0,1,2,3,4,5,6,7,8,9,0AH,0BH
	DB	0CH,0DH
	DB	0EH,0FH,10H,11H,12H
	DB	13H,14H,15H,16H,17H,18H,19H
	DB	1AH,1BH,1CH,1DH,1EH,1FH,' !"#$%&',27H
	DB	'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[',5CH,']^_`abcdefghijklmnopqrstuvwxyz{|}~',7FH,0,1
	DB	2,3,4,5,6,7,8,9,0AH,0BH,0CH
	DB	0DH
	DB	0EH,0FH,10H,11H,12H,13H
	DB	14H,15H,16H,17H,18H,19H,1AH
	DB	1BH,1CH,1DH,1EH,1FH,' !"#$%&',27H,
	DB	'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[',5CH,']^_`abcdefghijklmnopqrstuvwxyz{|}~',7FH,80H,1,82H
	DB	3,4,5,86H,87H,8,9,0AH,0BH,0CH
	DB	0DH
	DB	0EH,8FH,10H,91H,92H,93H
	DB	14H,15H,96H,97H,18H,19H,1AH
	DB	1BH,1CH,9DH,1EH,9FH,' 123456789'
	DB	0AAH,'0-',0ADH,'.',8BH,'0123456789'
	DB	0BAH,'0-',0BDH,'.',83H,12H,86H
	DB	0C2H,0C3H,0C4H,5,82H,0C7H,8,0C9H
	DB	0AH,84H,85H,0CDH,0CEH,0CFH,81H
	DB	0D1H,87H,0D3H,0D4H,0D5H,80H,0D7H
	DB	18H,0D9H,1AH,0DBH,0DCH,0DDH,0DEH
	DB	'0',0E0H,8EH,0E2H,0E3H,0E4H,0E5H
	DB	8AH,0E7H,0E8H,0E9H,0EAH,8CH,8DH
	DB	0EDH,0EEH,0EFH,89H,0F1H,8FH,0F3H
	DB	0F4H,0F5H,88H,0F7H,0F8H,0F9H,0FAH
	DB	0FBH,0FCH,0FDH,0FEH,7FH
KBSWEDISH:	
	DB	0,1,2,3,4,5,6,7,8,9,0AH,0BH
	DB	0CH,0DH
	DB	0EH,0FH,10H,11H,12H
	DB	13H,14H,15H,16H,17H,18H,19H
	DB	1AH,1BH,1CH,1DH,1EH,1FH,' !"#$%&',27H,'()*+,-./0123456789:;<=>?',0AH
	DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	DB	6,0EH,']',0,'_',1AH,'abcdefghijklmnopqrstuvwxyz`~}@',7FH,0,1
	DB	2,3,4,5,6,7,8,9,0AH,0BH,0CH
	DB	0DH
	DB	0EH,0FH,10H,11H,12H,13H
	DB	14H,15H,16H,17H,18H,19H,1AH
	DB	1BH,1CH,1DH,1EH,1FH,' !"#$%&/()*^,+.-0123456789',27H
	DB	'~;?:_<ABCDEFGHIJKLMNOPQRSTUVWXYZ',5CH,'[]`=>abcdefghijklmnopqrstuvwxyz|{}@',7FH,80H,1,82H
	DB	3,4,5,86H,87H,8,9,0AH,0BH,0CH
	DB	0DH
	DB	0EH,8FH,10H,91H,92H,93H
	DB	14H,15H,96H,97H,18H,19H,1AH
	DB	1BH,1CH,9DH,1EH,9FH,' 123456789'
	DB	0AAH,'0-',0ADH,'.',8BH,'0123456789'
	DB	0BAH,'0-',0BDH,'.',83H,12H,86H
	DB	0C2H,0C3H,0C4H,5,82H,0C7H,8,0C9H
	DB	0AH,84H,85H,0CDH,0CEH,0CFH,81H
	DB	0D1H,87H,0D3H,0D4H,0D5H,80H,0D7H
	DB	18H,0D9H,1AH,0DBH,0DCH,0DDH,0DEH
	DB	'0',0E0H,8EH,0E2H,0E3H,0E4H,0E5H
	DB	8AH,0E7H,0E8H,0E9H,0EAH,8CH,8DH
	DB	0EDH,0EEH,0EFH,89H,0F1H,8FH,0F3H
	DB	0F4H,0F5H,88H,0F7H,0F8H,0F9H,0FAH
	DB	0FBH,0FCH,0FDH,0FEH,7FH
KBGERMAN:	
	DB	0,1,2,3,4,5,6,7,8,9,0AH,0BH
	DB	0CH,0DH
	DB	0EH,0FH,10H,11H,12H
	DB	13H,14H,15H,16H,17H,18H,19H
	DB	1AH,1BH,1CH,1DH,1EH,1FH,' !"#$%&',27H,'()*+,-./0123456789:;<=>?',13H
	DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	DB	6,0EH,0,'^_',16H,'abcdefghijklmnopqrstuvwxyz`~@',11H,7FH,0,1
	DB	2,3,4,5,6,7,8,9,0AH,0BH,0CH
	DB	0DH
	DB	0EH,0FH,10H,11H,12H,13H
	DB	14H,15H,16H,17H,18H,1AH,19H
	DB	1BH,1CH,1DH,1EH,1FH,' !"@$%&/()^*,~.-0123456789#+;?:_<ABCDEFGHIJKLMNOPQRSTUVWXZY',5CH,'[]'
	DB	27H,'=>abcdefghijklmnopqrstuvwxzy|{}`',7FH,80H,1,82H
	DB	3,4,5,86H,87H,8,9,0AH,0BH,0CH
	DB	0DH
	DB	0EH,8FH,10H,91H,92H,93H
	DB	14H,15H,96H,97H,18H,19H,1AH
	DB	1BH,9CH,9DH,1EH,9FH,' 123456789'
	DB	0AAH,'0-',0ADH,'.',8BH,'0123456789'
	DB	0BAH,'0-',0BDH,'.',83H,12H,86H
	DB	0C2H,0C3H,0C4H,5,82H,0C7H,8,0C9H
	DB	0AH,84H,85H,0CDH,0CEH,0CFH,81H
	DB	0D1H,87H,0D3H,0D4H,0D5H,80H,0D7H
	DB	18H,0D9H,1AH,0DBH,0DCH,0DDH,0DEH
	DB	'0',0E0H,8EH,0E2H,0E3H,0E4H,0E5H
	DB	8AH,0E7H,0E8H,0E9H,0EAH,8CH,8DH
	DB	0EDH,0EEH,0EFH,89H,0F1H,8FH,0F3H
	DB	0F4H,0F5H,88H,0F7H,0F8H,0F9H,0FAH
	DB	0FBH,0FCH,0FDH,0FEH,7FH
KBUK:	
	DB	0,1,2,3,4,5,6,7,8,9,0AH,0BH
	DB	0CH,0DH
	DB	0EH,0FH,10H,11H,12H
	DB	13H,14H,15H,16H,17H,18H,19H
	DB	1AH,1BH,1CH,1DH,1EH,1FH,' !"'
	DB	3,'$%&',27H,'()*+,-./0123456789:;<=>?'
	DB	5,'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	DB	0BH,0CH,0DH
	DB	'^_',16H,'abcdefghijklmnopqrstuvwxyz',1BH,1CH,1DH
	DB	0FH,7FH,0,1,2,3,4,5,6,7,8,9
	DB	0AH,0BH,0CH,0DH
	DB	0EH,0FH,10H
	DB	11H,12H,13H,14H,15H,16H,17H
	DB	18H,19H,1AH,1BH,1CH,1DH,1EH
	DB	1FH,' !"#$%&',27H,'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[',5CH,']^_`abcdefghijklmnopqrstuvwxyz{|}~'
	DB	7FH,80H,1,82H,3,4,5,86H,87H
	DB	8,9,0AH,0BH,0CH,0DH
	DB	0EH,8FH
	DB	10H,91H,92H,93H,14H,15H,96H
	DB	97H,18H,19H,1AH,1BH,1CH,9DH
	DB	1DH,9FH,' 123456789',0AAH,'0-'
	DB	0ADH,'.',8BH,'0123456789',0BAH
	DB	'0-',0BDH,'.',83H,12H,86H,0C2H
	DB	0C3H,0C4H,5,82H,0C7H,8,0C9H,0AH
	DB	84H,85H,0CDH,0CEH,0CFH,81H,0D1H
	DB	87H,0D3H,0D4H,0D5H,80H,0D7H,18H
	DB	0D9H,1AH,0DBH,0DCH,0DDH,0DEH,'0'
	DB	0E0H,8EH,0E2H,0E3H,0E4H,0E5H,8AH
	DB	0E7H,0E8H,0E9H,0EAH,8CH,8DH,0EDH
	DB	0EEH,0EFH,89H,0F1H,8FH,0F3H,0F4H
	DB	0F5H,88H,0F7H,0F8H,0F9H,0FAH,0FBH
	DB	0FCH,0FDH,0FEH,7FH
KBUSWS:	
	DB	0,1,2,3,4,5,6,7,8,9,0AH,0BH
	DB	0CH,0DH
	DB	0EH,0FH,10H,11H,12H
	DB	13H,14H,15H,16H,17H,18H,19H
	DB	1AH,1BH,1CH,1DH,1EH,1FH,' !"#$%&',27H,'()*+,-./0123456789:;<=>?',5
	DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	DB	0BH,0CH,0DH
	DB	'^_',16H,'abcdefghijklmnopqrstuvwxyz',1BH,1CH,1DH
	DB	0FH,7FH,0,1,2,3,4,5,6,7,8,9
	DB	0AH,0BH,0CH,0DH
	DB	0EH,0FH,10H
	DB	11H,12H,13H,14H,15H,16H,17H
	DB	18H,19H,1AH,1BH,1CH,1DH,1EH
	DB	1FH,' !"#$%&',27H,'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[',5CH,']^_`abcdefghijklmnopqrstuvwxyz{|}~'
	DB	7FH,80H,1,82H,3,4,5,86H,87H
	DB	13H,9,18H,0BH,0CH,0DH
	DB	0EH,8FH
	DB	10H,91H,92H,93H,14H,15H,96H
	DB	97H,4,19H,5,1BH,1CH,9DH,1EH
	DB	9FH,' 123456789',0AAH,'0-',0ADH
	DB	'.',8BH,'0123456789',0BAH,'0-'
	DB	0BDH,'.',83H,12H,86H,0C2H,0C3H
	DB	0C4H,5,82H,0C7H,8,9,0AH,84H,85H
	DB	0CDH,0CEH,0CFH,81H,0D1H,87H,0D3H
	DB	0D4H,0D5H,80H,0D7H,18H,0D9H,1AH
	DB	0DBH,0DCH,0DDH,0DEH,'0',0E0H,8EH
	DB	0E2H,0E3H,0E4H,0E5H,8AH,0E7H,0E8H
	DB	0E9H,0EAH,8CH,8DH,0EDH,0EEH,0EFH
	DB	89H,0F1H,8FH,0F3H,0F4H,0F5H,88H
	DB	0F7H,0F8H,0F9H,0FAH,0FBH,0FCH,0FDH
	DB	0FEH,7FH
KBFRENCH:	
	DB	0,1,2,3,4,5,6,7,8,9,0AH,0BH
	DB	0CH,0DH
	DB	0EH,0FH,10H,11H,12H
	DB	13H,14H,15H,16H,17H,18H,19H
	DB	1AH,1BH,1CH,1DH,1EH,1FH,' !"#$%&',27H,'()*+,-./0123456789:;<=>?',5
	DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	DB	0BH,0CH,0DH
	DB	'^_',16H,'abcdefghijklmnopqrstuvwxyz',1BH,1CH,1DH
	DB	0FH,7FH,0,11H,2,3,4,5,6,7,8
	DB	9,0AH,0BH,0CH,0DH
	DB	0EH,0FH,10H
	DB	1,12H,13H,14H,15H,16H,1AH,18H
	DB	19H,17H,1BH,1CH,1DH,1EH,1FH
	DB	' !"#$%&',27H,'()*+,-./0123456789:;<=>?@QBCDEFGHIJKL[NOPARSTUVZXYWM',5CH,']^_`qbcdefghijkl{noparstuvzxywm|}~'
	DB	7FH,80H,1,82H,3,4,5,86H,87H
	DB	8,9,0AH,0BH,0CH,0DH
	DB	0EH,8FH
	DB	10H,91H,92H,93H,14H,15H,96H
	DB	97H,18H,19H,1AH,1BH,1CH,9DH
	DB	1EH,9FH,' 123456789',0AAH,'0-'
	DB	0ADH,'.',8BH,'0123456789',0BAH
	DB	'0-',0BDH,'.',83H,12H,86H,0C2H
	DB	0C3H,0C4H,5,82H,0C7H,8,0C9H,0AH
	DB	84H,85H,0CDH,0CEH,0CFH,81H,0D1H
	DB	87H,0D3H,0D4H,0D5H,80H,0D7H,18H
	DB	0D9H,1AH,0DBH,0DCH,0DDH,0DEH,'0'
	DB	0E0H,8EH,0E2H,0E3H,0E4H,0E5H,8AH
	DB	0E7H,0E8H,0E9H,0EAH,8CH,8DH,0EDH
	DB	0EEH,0EFH,89H,0F1H,8FH,0F3H,0F4H
	DB	0F5H,88H,0F7H,0F8H,0F9H,0FAH,0FBH
	DB	0FCH,0FDH,0FEH,7FH
KBLIBRARY:	
	DB	0,1,2,3,4,5,6,7,8,9,0AH,0BH
	DB	0CH,0DH
	DB	0EH,0FH,10H,11H,12H
	DB	13H,14H,15H,16H,17H,18H,19H
	DB	1AH,1BH,1CH,1DH,1EH,1FH,' !"#'
	DB	4,'%&',27H,'()*+,-./0123456789:;'
	DB	0BH,'=',0DH
	DB	'?',5,'ABCDEFGHIJKLMNOPQRSTUVWXYZ[',5CH,']^_',16H,'abcdefghijklmnopqrstuvwxyz{|}',10H,7FH
	DB	0,1,2,3,4,5,6,7,8,9,0AH,0BH
	DB	0CH,0DH
	DB	0EH,0FH,10H,11H,12H
	DB	13H,14H,15H,16H,17H,18H,19H
	DB	1AH,1BH,1CH,1DH,1EH,1FH,' !"#$%&',27H,'()^~,+.-0123456789*/;?:_<ABCDEFGHIJKLMNOPQRSTUVWXYZ['
	DB	5CH,']@=>abcdefghijklmnopqrstuvwxyz{|}`',7FH,80H
	DB	1DH,82H,0CH,12H,5,86H,87H,8
	DB	9,0AH,15H,0CH,0DH
	DB	13H,8FH,10H
	DB	91H,92H,93H,94H,95H,96H,97H
	DB	18H,99H,1AH,1BH,9CH,9DH,9EH
	DB	9FH,' 123456789',0AAH,'0-',0ADH
	DB	'.',8BH,'0123456789',0BAH,'0-'
	DB	0BDH,'.',83H,0C0H,86H,0C2H,0C3H
	DB	0C4H,0C5H,82H,0C7H,0C8H,0C9H,0CAH
	DB	84H,85H,0CDH,0CEH,0CFH,81H,0D1H
	DB	87H,0D3H,0D4H,0D5H,80H,0D7H,0D8H
	DB	0D9H,0DAH,0DBH,0DCH,0DDH,0DEH,'0'
	DB	0E0H,8EH,0E2H,0E3H,0E4H,0E5H,8AH
	DB	0E7H,0E8H,0E9H,0EAH,8CH,8DH,0EDH
	DB	0EEH,0EFH,89H,0F1H,8FH,0F3H,0F4H
	DB	0F5H,88H,0F7H,0F8H,0F9H,0FAH,0FBH
	DB	0FCH,0FDH,0FEH,7FH,80H,1DH,82H
	DB	0CH,12H,5,86H,87H,8,9,0AH

; PADDING TO MAKE BINARY EQUIVALENT WITH ORIGINAL.
	DB	1AH, 1AH, 1AH
	END
